pipeline {
  agent {
    label 'iOS'
  }
  stages {

    stage('Lint') {
      steps {
script {
	if (isUnix()) {
        sh '''
	export LANG=en_US.UTF-8
	source ~/.bash_profile
	bundle exec fastlane lint
	'''
        // publish Android Lint results
        androidLint canComputeNew: false, defaultEncoding: '', healthy: '', pattern: 'app/build/reports/**/lint-results.xml', unHealthy: ''
      }
	else{
	    echo 'Linting on Windows started'
	    bat 'gradlew lint'
    }
}
}    
}
    
    stage('Unit tests') {
      steps {
	script{
		if (isUnix()) {
        	sh './gradlew clean jacocoTestReport'
        	jacoco( 
          	execPattern: 'app/build/jacoco/*.exec',
          	exclusionPattern: '**/R.class,**/R$*.class,**/BuildConfig.*,**/Manifest*.*,**/*Test*.*,android/**/*.*'
        	)
		}
		else
		{
			echo 'Running unit tests on Windows..'
			bat 'gradlew clean jacocoTestReport'
			jacoco( 
          			execPattern: 'app/build/jacoco/*.exec',
          			exclusionPattern: '**/R.class,**/R$*.class,**/BuildConfig.*,**/Manifest*.*,**/*Test*.*,android/**/*.*'
        	)
		}
	}
      }
    }

    stage('SonarQube analysis') {
      steps {
	script{
		if (isUnix()) {
        	withSonarQubeEnv('Sonarqube') {
          	// requires SonarQube Scanner for Gradle 2.1+
          	// It's important to add --info because of SONARJNKNS-281
          	sh './gradlew --info sonarqube'
			}
		}
		else {
			echo 'SonarQube analysis on Windows..'
			withSonarQubeEnv('Sonarqube')
			{
			    bat 'gradlew --info sonarqube'
			}
			}
		}
	}
    }

    // https://docs.sonarqube.org/display/SONAR/Quality+Gates
    // https://jenkins.io/blog/2017/04/18/continuousdelivery-devops-sonarqube/    
    // https://jenkins.io/doc/pipeline/steps/sonar/#code-waitforqualitygate-code-wait-for-sonarqube-analysis-to-be-completed-and-return-quality-gate-status
    stage("SonarQube Quality Gate") {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Appium Tests') {
      steps {
    	script{
    		if (isUnix()) {
            sh '''
    	./gradlew assembleDebug        
    	cd appium
    	virtualenv venv
    	. ./venv/bin/activate
    	pip install -r requirements.txt
    	behave
            '''
    	}
    	else
    	{
    		echo 'Running Appium Tests on Windows..'
		bat 'gradlew assembleDebug'
		bat 'cd appium && python -m pip install virtualenv && virtualenv venv && python -m pip install -r requirements.txt && behave'
    	}
      }
    }
}

    stage('Deploy Beta') {
      steps {
	script{
		if (isUnix()) {
        		sh 'bundle exec fastlane beta'
		}
		else
		{
			fastlane beta
		}
      }
    }
  }
}

  // https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki/Reporting-test-results-and-storing-artifacts
  post {
    always {
      //archive "build/**/*"
      archiveArtifacts allowEmptyArchive: true, artifacts: 'app/build/outputs/apk/debug/app-debug.apk,app/build/outputs/apk/release/app-release.apk'
      junit 'app/build/test-results/**/*.xml'
    }
  }
}